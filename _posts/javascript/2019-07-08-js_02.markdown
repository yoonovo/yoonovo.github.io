---
layout: post
title:  "Array Method (배열 메소드)"
date:   2019-07-08 17:00:00 +0900
categories: javascript
---
<style>
    .clr1 {color: tomato;}
    .clr2 {color: orange;}
</style>


# __Array Method(배열 메소드)__

- [Filter](#filter)
- [ForEach](#foreach)
- [Map](#map)
- [Reduce](#reduce)

## Filter
<span class="clr1">filter 함수</span>는 배열을 순회하면서 조건을 만족하는 요소만을 배열로 반환한다. 
{% highlight javascript %}
const result = 배열.filter(콜백함수(요소, 인덱스, 배열객체));
{% endhighlight %}

사용법은 먼저 반환된 배열을 담을 변수를 선언하고 순회할 배열에 filter함수를 붙인다. filter함수 안에는 조건을 담고 있는 콜백함수를 넣는다. 
이때 매개변수에는 <span class="clr2">요소(value), 요소의 인덱스(index), 순회하는 배열(Array)</span> 순으로 넣을 수 있다.

간단한 예제를 살펴보자 

{% highlight javascript %}
const arr = [1, 2, 3, 4, 5];

let result = arr.filter(n => { 
	return n > 2;
});

console.log(result);
{% endhighlight %}

> 3, 4, 5

위의 코드에서 콜백함수의 조건은 `n > 2`, 2보다 큰 수이다. 순회할 배열 `[1, 2, 3, 4, 5]`에서 2보다 큰 수는 3, 4, 5이므로 result는 `[3, 4, 5]`가 담기게 된다.

또 <span class="clr1">filter 함수</span>는 배열을 순회 할 때 빈 요소를 건너뛰기 때문에 반환된 값을 보면 빈 요소가 없다.

{% highlight javascript %}
const arr = [1,2,,,,3,,,4,5];

let result = arr.filter(n => { 
	return n;
});

console.log(result);
{% endhighlight %}

> 1, 2, 3, 4, 5

또 아래 예제 같은 방식으로도 사용할 수 있다.

{% highlight javascript %}
const arr = [    
  {"name":"Jack", "job": "student"},    
  {"name":"Mery", "job": "Nurse"},    
  {"name":"Emma", "job": "student"},    
  {"name":"Danny", "job": "office worker"}
];    
let result = arr.filter(val => {    
  return val.job === "student";
});  

console.log(result);
{% endhighlight %}
 s
> 0: {name: "Jack", job: "student"}  
> 1: {name: "Emma", job: "student"}

## ForEach
<span class="clr1">foreach 함수</span>는 for문처럼 끝을 지정해 주지않아도 배열을 끝까지 순회해주는 함수입니다.

{% highlight javascript %}
배열.forEach(콜백함수(요소, 인덱스, 배열객체));
{% endhighlight %}

사용법은 위의 <span class="clr1">filter 함수</span>와 같이 콜백함수를 넣고 매캐변수로 요소, 인덱스, 배열객체를 넣을 수 있다.  
예제를 보며 알아보자

{% highlight javascript %}
const arr = ['Mon', 'Tue', 'Wed', 'thu', 'Fri', 'Sat', 'Sun'];
{% endhighlight %}

요일이 담겨있는 배열이 있다. 요일을 하나씩 출력하려 할 때 어떻게 코드를 짜야 할까?  
간단한 방법으로는 For문을 사용하여 만드는 것이다.

{% highlight javascript %}
for (let i = 0 ; i < arr.length ; i++) {
    console.log(arr[i]);
}
{% endhighlight %}

위처럼 배열의 length로 마지막 인덱스 값을 구하고 i를 인덱스 값으로 하면 배열을 순서대로 출력할 수 있다.  
위의 코드를 ForEach를 적용해 바꿔보겠다.

{% highlight javascript %}
arr.forEach((val)=>{
    console.log(val);
});
{% endhighlight %}

ForEach를 사용하면 배열의 마지막 인덱스 값을 구하거나 인덱스 값으로 배열을 순회하지 않아도 된다. ForEach 특성상 알아서 배열을 순회하고 매개변수에 요소가 있기 때문이다.

> Mon  
> Tue  
> Wed  
> thu  
> Fri  
> Sat  
> Sun

## Map
## Reduce